{"name":"Fortnotes","tagline":"FortNotes is a highly secure online private information manager based on the AES encryption in the browser.","body":"#FortNotes#\r\n\r\nFortNotes is a highly secure online private information manager based on the AES encryption in the browser.\r\nThe current stable version - <https://bitbucket.org/DarkPark/fortnotes>\r\n\r\n\r\n##Deployment##\r\n\r\nDependencies:\r\n\r\n- [NodeJS](http://nodejs.org/)\r\n- [Node Packaged Modules](https://npmjs.org/)\r\n- [MongoDB](http://www.mongodb.org/)\r\n\r\nInstall command (for Ubuntu): `sudo apt-get install nodejs npm mongodb`.\r\n\r\nDownload and install the project files: `npm install fortnotes`.\r\n\r\nRun the server with `npm start` or `node server/main.js`.\r\nNow the web client is accessible in a web browser <http://localhost:8080/client/>.\r\n\r\n##Development##\r\n\r\n`sudo npm install -g grunt-cli`\r\n\r\n\r\nfortnotes.com/client/\r\nfortnotes.com/sync/\r\nfortnotes.com/api/\r\n\r\napp.fortnotes.com\r\napi.fortnotes.com\r\n\r\n\r\n##API##\r\n\r\nRequests:\r\n\r\n Method | Url                              | Description\r\n:------:|:---------------------------------|:----------------------------------------------------------------------\r\n GET    | /api/v1/auth/**name**            | return user ip and pass salt for hash generation\r\n POST   | /api/v1/auth/**name**/**pass**   | return api key (base64 encoded 64 bytes string) of the created session\r\n GET    | /api/v1/sessions?limit=20&skip=0 | return a list of user's sessions\r\n GET    | /api/v1/sessions/**key**         | return a session info by the given api key\r\n HEAD   | /api/v1/notes                    | return all notes general info\r\n GET    | /api/v1/notes                    | return a list of last 20 records\r\n GET    | /api/v1/notes?limit=20&skip=0    | return a custom list of records\r\n POST   | /api/v1/notes                    | submit fields for creating a new note\r\n HEAD   | /api/v1/tags                     | return all tags general info\r\n GET    | /api/v1/tags                     | return a list of last 20 records\r\n GET    | /api/v1/tags?limit=20&skip=0     | return a custom list of records\r\n POST   | /api/v1/tags                     | submit fields for creating a new tag\r\n\r\nResponse codes:\r\n\r\n Code | Meaning           | Description\r\n:----:|:------------------|:---------------------------------------------------------------\r\n  1   | ok                | successful call\r\n  2   | wrong API version | probably too old api version\r\n  3   | wrong API context | url entity part is wrong - /api/v1/**invalid**\r\n  4   | wrong API method  | the corresponding entity doesn't have this method (GET/POST...)\r\n  5   | wrong auth data   | invalid user name, password or api key\r\n\r\n###Authentication###\r\n\r\nTwo-steps algorithm:\r\n\r\n- /api/v1/auth/name\r\n- /api/v1/auth/name/pass\r\n\r\n\r\n###Client-side data###\r\n\r\nThere are some stored parameters in the browser localStorage:\r\n\r\n Name             | Description\r\n:-----------------|:-----------------------------------------------------------\r\n config.auth.key  | api key for authentication (base64 encoded 64 bytes string)\r\n config.sjcl      | encrypt/decrypt user-specific parameters","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}